* 구조 분해 할당
1. 배열의 구조 분해 할당
   - let arr = [1,2,3];
     let [one, two, three] = arr;

     => consolg.log(one, two ,three) => 1,2,3
   - let arr = [1,2,3];
     let [one, two] = arr;

     => consolg.log(one, two) => 1,2 
2. 객체의 구조 분해 할당
   - let person = {
        name: "이정환",
        age : 25,
        location : "경기도"
     }

     let {name, age, location} = person;

     => console.log(name, age, location); => 이정환, 25, 경기도

스프레드 연산자
- ... 기호로 표기하며, 전개 연산자라고도 부른다.
- 배열, 문자열, 객체 등과 같이 반복이 가능한 객체의 값을 개별 요소로 분리할 수 있다.

: let arrA = [1,2,3];
  let arrB = [...arrA,4,5,6];

  console.log(arrB); => [1,2,3,4,5,6];

rest 매개변수
- 나머지 매개변수라고 하며, 스프레드 연산자처럼 기호 ... 으로 표기한다.
- rest 매개변수의 값은 배열로 묶인다.

: function func(param, ...rest){
    console.log(param); => 1
    console.log(rest); => [2,3,4]
  }

  func(1,2,3,4);

JSX 
- 자바스크립트와 HTML 태그를 섞어 사용하는 문법(자바스크립트 XML)
- 자바스크립트이 확장 문법
- 자바스크립트라는 표현식으로 사용할 때에는 {}를 사용한다.
  ex. const number = 1;
      <h1> {number} <h2>
- JSX는 숫자, 문자열, 불리언, null, undefined를 제외한 값을 사용할 경우에는 오류가 발생한다.
  ex. 객체, 배열 등...

JSX 규칙
- 여는 태그가 있으면 반드시 닫는 태그도 존재하여야 한다.
- JSX가 반환하는 모든 태그는 반드시 최상위 태그로 감싸야 한다.
  만약 최상위 태그로 사용하지 않으려면 반드시, <React.Fragment> 태그를 사용해야 한다.
  <React.Fragment>로 다른태그를 감싸면 최상위 태그를 대체하는 효과가 있다.
  <React.Fragment> 대신에, <></> 태그를 사용할 수도 있다.

JSX 스타일링
- JSX의 인라인 스타일링은 style={{스타일 규칙들}}과 같은 문법으로 작성한다.
  ex. <div style={{ background: "red", color: "blue" }}>
- 스타일 파일 분리
  <link rel='stylesheet' href="css 파일 경로">

Props
- 리액트에서는 부모가 자식 컴포넌트에 단일 객체 형태로 값을 전달할 수 있다.
- 컴포넌트에 값을 전달하는 속성들 (Properties)
- *. Props는 부모만이 자식 컴포넌트에 전달할 수 있으며, 자식은 부모에게 전달할 수 없다.
- Props를 전달하려는 자식 컴포넌트 태그에서 이름={값} 형식으로 작성하면 된다.
- 부모에서 자식에게 Props를 전달시 자식에게 선언되어있는 특정 값을 전달하지 못할경우, defaultProps를 이용하여 전달해야함
  ex. Body.defaultProps = {
        favorList: [],
      };
  - 위와 같이 기본값을 세팅하지 않고 자식에서 선언되어있을 경우 오류가 발생한다.

State
- 상태
- 리액트 컴포넌트는 State 값에 따라 다른 결과를 렌더링 한다.

- 리액트에서는 useStatus로 status를 생성한다.
ex. const [light, setLight] = useStatus('off');
           -> light는 state변수, setLight는 set함수, useStatus('off')는 생성자(초깃값)
- useStatus를 호출하면 2개의 요소가 담긴 배열을 반환한다.
  첫번째 요소는 현재 상태의 값을 저장하고 있는 변수로 state 변수
  두번째 요소는 status 변수의 값을 변경하는, 즉 상태를 업데이트하는 함수로 set함수
  또한, State를 만들기 위해 useStatus를 react 라이브러리에서 불러와야한다.

- state로 객체를 담을 경우에는 
  setStatue({ ...state, [e.target.name] : e.target.value,})와 같이 세팅이 되는데 
  기존 객체를 가져와 내가 변경해야되는 부분을 다시 할당 하여 변경하기 위해서라고한다...!?

Ref
- 참조
- 리액트의 Ref를 이용하면 DOM 요소들을 직접 조작할 수 있다.
- 사용하기 위해선 import {useRef} from "react"; 선언
- const textRef = useRef();
- textRef.current.value = ""; // textRef가 현재 참조하고 있는 DOM의 value값을 공백 문자열로 초기화한다.

