useReducer
- 컴포넌트에서 상태 변화 코드를 쉽게 분리할 수 있다.
  : 상태변화코드란 State 값을 변경하는 코드

* useState / useReducer
- useState는 컴포넌트 안에 작성해야만 하며, 외부에서는 사용이 불가하다.
- useReducer는 컴포넌트 밖으로 분리할 수 있으며, State 관리를 외부에서 할 수 있다.

useReducer
ex. const [count, dispatch] = useReducer(reducer, 0);
    : count : state 변수
    : dispatch : 상태 변화 촐발 함수
    : useReducer(reducer, 0) : 생성자(상태 변화 함수, 초깃값)

JSX 주석 : {/* .... */}

최적화와 메모이제이션

최적화 : 웹 서비스의 성능을 개선하는 기술
        프로그래밍에서 불필요하게 낭비되는 연산을 줄여 렌더링의 성능을 높이는 방법
메모이제이션 : 메모하는 방법
              특정 입력에 대한 결과를 계산해 메모리 어딘가에 저장했다가, 동일한 요청이 들어면 저장한 결과값을 제공해 빠르게 응답하는 기술
              -> 불필요한 연산을 줄여 주어 프로그램의 실행 속도를 빠르게 만든다.

useMemo
: 메모이제이 기법을 이용하여 연산의 결과값을 기억했다가 필요할 때 사용함으로써 불필요한 함수 호출을 막아주는 리액트 훅
ex. const value = useMemo(callback, deps);
    : callback : 콜백함수
    : deps : 의존성 배열
-> useMemo는 의존성 배열 deps의 값이 변할 떄만 호출된다.

React.memo
: 컴포넌트가 불필요하게 리렌더되는 상황을 방지한다.
ex. const memoizedComp = React.memo(Comp)
    : Comp는 메모이제이션하려는 컴포넌트

고차 컴포넌트(HOC, Higher Order Component)
: 인수로 전달된 컴포넌트를 새로운 컴포넌트로 반환하는 함수
  다만, 전달된 컴포넌트를 그대로 반환하는게 아니라 어떤 기능을 추가해 반환한다. ("강화된 컴포넌트")

횡단 관심사 (Cross-Cutting Concerns)
: 프로그래밍에서 비즈니스 로직과 구분되는 공통 기능을 지칭할 떄 사용하는 언어이다.

useCallback
: 컴포넌트가 리렌더될 때 내부에 작성된 함수를 다시 생성하지 않도록 메모이제이션하는 리액트 훅이다.
ex. const memoizedFunc = useCallback(func, deps)
    : func : 콜백함수
    : deps : 의존성 배열
    : useCallback은 의존성 배열에 담긴 값이 바뀌면 첫 번째 인수로 전달한 콜백 함수를 다시 만들어 반환한다.
    : 첫번째 인수로 전달한 콜백 함수를 어떤 경우에도 다시 생성되지 않게 하려면 의존성 배열을 빈 배열로 전달하면 된다.
      const memoizedFunc = useCallback(func, [])
  